library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity flip_counter is
    port(
          X  : in std_logic;
          CK : in std_logic;
       Reset : in std_logic;
           Q : out std_logic_vector(1 downto 0)
           );
end flip_counter;

architecture archi of flip_counter is


   type state_type is (S0,S1,S2,S3);
   signal state, next_state : state_type;
  
begin

   SYNC_PROC: process (ck,reset)
   begin
   
      if (reset = '0') then
      	if (ck'event and ck = '1') then
            state <= next_state; 
          end if;         
      else
         state <= s0;               
      end if;
      
   end process;

   NEXT_STATE_CODE: process (state,X)
   begin
     
      next_state <= state;  

      case (state) is
         when s0 =>
             Q<="00";
             if x = '0' then
               next_state <= s0;
             elsif x = '1' then
               next_state <= s1;
             end if;
            
          when s1 =>
             Q<="01";
             if x = '0' then
               next_state <= s1;
             elsif x = '1'  then
               next_state <= s2;            
             end if;

         when s2 =>
             Q<="10";
             if x = '0' then
               next_state <= s2;
             elsif x = '1' then
               next_state <= s3;
             end if;
             
          when s3 =>
            Q<="11";
             if x = '0'  then
               next_state <= s3;
             elsif x = '1'  then
               next_state <= s1;      
             end if;
                  
         when others =>
            Q<="00";
            next_state <= s0;
      end case;
   end process;
			
end;
